from flask import Flask, render_template, request, redirect, url_for, flash, session, jsonify, send_file, send_from_directory
from flask_wtf import FlaskForm
from wtforms import StringField, RadioField, SubmitField, HiddenField
from wtforms.validators import DataRequired, Length
from datetime import datetime
import os
import random
import xml.etree.ElementTree as ET
from werkzeug.utils import secure_filename
from io import BytesIO
import zipfile
import requests
import base64

app = Flask(__name__, template_folder='app/templates', static_folder='app/static')
app.config['SECRET_KEY'] = 'fsist-secret-key'
app.config['UPLOAD_FOLDER'] = 'app/uploads'

# Ensure the upload directory exists
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# Context processors
@app.context_processor
def inject_now():
    return {'now': datetime.now}

# Formulário para consulta de chaves
class ChaveForm(FlaskForm):
    tipo_documento = RadioField('Tipo de Documento', choices=[('NFe', 'NFe'), ('CTe', 'CTe')], default='NFe')
    chave_acesso = StringField('Chave de Acesso', validators=[DataRequired(), Length(min=44, max=44, message="A chave deve conter exatamente 44 dígitos.")])
    captcha = StringField('Captcha', validators=[DataRequired()])
    submit = SubmitField('Consultar')

@app.route('/')
def index():
    form = ChaveForm()
    return render_template('index.html', form=form)

@app.route('/consultar', methods=['POST'])
def consultar():
    form = ChaveForm()
    if form.validate_on_submit():
        chave = form.chave_acesso.data
        tipo = form.tipo_documento.data
        
        # Simulando processamento da consulta
        # Normalmente aqui consultaria a SEFAZ usando certificado digital
        
        # Adicionar à lista de chaves recentes
        nova_chave = {
            "id": len(chaves_recentes) + 1,
            "chave": chave,
            "tipo": tipo,
            "data": datetime.now().strftime("%d/%m/%Y %H:%M"),
            "status": "Baixado"
        }
        chaves_recentes.insert(0, nova_chave)
        
        # Redirecionar para a página de resultado
        return redirect(url_for('resultado', chave=chave))
    
    # Se houver erros de validação, voltar para a página inicial
    return render_template('index.html', form=form)

@app.route('/resultado/<chave>')
def resultado(chave):
    # Simular dados do documento baseado na chave
    documento = {
        "chave": chave,
        "tipo": "NFe" if chave.startswith("35") else "CTe",
        "emissao": "10/10/2023",
        "valor": "1.250,75",
        "emitente": {
            "cnpj": "11.111.111/0001-11",
            "razao_social": "EMPRESA DEMONSTRAÇÃO LTDA",
            "endereco": "Rua Exemplo, 123 - São Paulo/SP"
        }
    }
    
    return render_template('resultado.html', documento=documento)

@app.route('/xml_para_pdf', methods=['GET', 'POST'])
def xml_para_pdf():
    if request.method == 'POST':
        # Verificar se o arquivo foi enviado
        if 'xml_file' not in request.files:
            flash('Nenhum arquivo enviado', 'danger')
            return redirect(request.url)
        
        xml_file = request.files['xml_file']
        
        # Se o usuário não selecionou um arquivo
        if xml_file.filename == '':
            flash('Nenhum arquivo selecionado', 'danger')
            return redirect(request.url)
        
        # Se há um arquivo e é permitido
        if xml_file and xml_file.filename.endswith('.xml'):
            # Simular processamento do arquivo
            flash('Arquivo XML convertido com sucesso!', 'success')
            
            # Redirecionamento com mensagem de sucesso
            return redirect(url_for('xml_para_pdf'))
    
    return render_template('xml_para_pdf.html')

@app.route('/download_xml/<chave>')
def download_xml(chave):
    # Esta rota simularia o download do XML
    # Em uma implementação real, geraria o arquivo XML e o enviaria como resposta
    flash('XML baixado com sucesso!', 'success')
    return redirect(url_for('resultado', chave=chave))

@app.route('/gerar_danfe/<chave>')
def gerar_danfe(chave):
    # Esta rota simularia a geração do DANFE
    # Em uma implementação real, geraria o PDF e o enviaria como resposta
    flash('DANFE gerado com sucesso!', 'success')
    return redirect(url_for('resultado', chave=chave))

@app.route('/gerar-relatorio-com-xmls', methods=['GET', 'POST'])
def gerar_relatorio():
    xml_data = None
    incluir_itens = False
    
    # Se for uma requisição POST, processar os arquivos enviados
    if request.method == 'POST':
        if 'xml_files' not in request.files:
            flash('Nenhum arquivo enviado', 'danger')
            return redirect(request.url)
        
        xml_files = request.files.getlist('xml_files')
        incluir_itens = request.form.get('incluir_itens') == 'on'
        
        if not xml_files or xml_files[0].filename == '':
            flash('Nenhum arquivo selecionado', 'danger')
            return redirect(request.url)
        
        # Lista para armazenar os dados de todas as notas
        todas_notas = []
        
        # Processar cada arquivo XML
        for xml_file in xml_files:
            if xml_file and xml_file.filename.endswith('.xml'):
                # Salvar o arquivo temporariamente
                filename = secure_filename(xml_file.filename)
                filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                xml_file.save(filepath)
                
                # Processar o arquivo XML
                nota_data = processar_xml(filepath)
                if nota_data:
                    todas_notas.append(nota_data)
                
                # Remover o arquivo temporário
                os.remove(filepath)
        
        if todas_notas:
            # Armazenar os dados na sessão para download posterior
            session['notas_processadas'] = todas_notas
            xml_data = todas_notas
            flash('XMLs processados com sucesso!', 'success')
        else:
            flash('Nenhum arquivo XML válido foi processado', 'danger')
            return redirect(request.url)
    
    return render_template('gerar_relatorio.html', xml_data=xml_data, incluir_itens=incluir_itens)

@app.route('/download-relatorio')
def download_relatorio():
    formato = request.args.get('formato', 'excel')
    incluir_itens = request.args.get('incluir_itens', 'false').lower() == 'true'
    
    # Recuperar dados da sessão
    notas = session.get('notas_processadas')
    if not notas:
        flash('Nenhum dado disponível para download. Por favor, processe os XMLs novamente.', 'warning')
        return redirect(url_for('gerar_relatorio'))
    
    # Gerar arquivo Excel ou CSV
    if formato == 'excel':
        return gerar_excel(notas, incluir_itens)
    else:
        return gerar_csv(notas, incluir_itens)

def gerar_excel(notas, incluir_itens):
    """Gera um arquivo Excel com os dados das notas"""
    import pandas as pd
    from io import BytesIO
    
    # Criar DataFrames para as notas e itens
    dados_notas = []
    dados_itens = []
    
    for nota in notas:
        # Dados da nota
        dados_notas.append({
            'Tipo': nota['tipo'],
            'Chave': nota['chave'],
            'Número': nota['numero'],
            'Série': nota['serie'],
            'Data Emissão': nota['data_emissao'],
            'Emitente': nota['emitente']['razao_social'],
            'CNPJ Emitente': nota['emitente']['cnpj_cpf'],
            'Destinatário': nota['destinatario']['razao_social'],
            'CNPJ Destinatário': nota['destinatario']['cnpj_cpf'],
            'Valor Total': nota['valor_total'],
            'Forma Pagamento': nota['pagamento']['forma'],
            'Frete': nota['frete']
        })
        
        # Dados dos itens (se solicitado)
        if incluir_itens:
            for item in nota['itens']:
                dados_itens.append({
                    'Tipo Nota': nota['tipo'],
                    'Chave Nota': nota['chave'],
                    'Número Nota': f"{nota['numero']}/{nota['serie']}",
                    'Número Item': item['numero'],
                    'Código': item['codigo'],
                    'Descrição': item['descricao'],
                    'Valor Total': item['valor_total']
                })
    
    # Criar arquivo Excel
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        # Salvar dados das notas
        df_notas = pd.DataFrame(dados_notas)
        df_notas.to_excel(writer, sheet_name='Notas', index=False)
        
        # Formatar a planilha de notas
        workbook = writer.book
        worksheet = writer.sheets['Notas']
        
        # Formatos
        header_format = workbook.add_format({
            'bold': True,
            'text_wrap': True,
            'valign': 'top',
            'bg_color': '#D9EAD3',
            'border': 1
        })
        
        # Aplicar formato ao cabeçalho
        for col_num, value in enumerate(df_notas.columns.values):
            worksheet.write(0, col_num, value, header_format)
        
        # Ajustar largura das colunas
        for i, col in enumerate(df_notas.columns):
            column_len = max(df_notas[col].astype(str).apply(len).max(), len(col)) + 2
            worksheet.set_column(i, i, column_len)
        
        # Salvar dados dos itens (se houver)
        if incluir_itens and dados_itens:
            df_itens = pd.DataFrame(dados_itens)
            df_itens.to_excel(writer, sheet_name='Itens', index=False)
            
            # Formatar a planilha de itens
            worksheet_itens = writer.sheets['Itens']
            
            # Aplicar formato ao cabeçalho
            for col_num, value in enumerate(df_itens.columns.values):
                worksheet_itens.write(0, col_num, value, header_format)
            
            # Ajustar largura das colunas
            for i, col in enumerate(df_itens.columns):
                column_len = max(df_itens[col].astype(str).apply(len).max(), len(col)) + 2
                worksheet_itens.set_column(i, i, column_len)
    
    output.seek(0)
    return send_file(
        output,
        mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        as_attachment=True,
        download_name='relatorio_notas.xlsx'
    )

def gerar_csv(notas, incluir_itens):
    """Gera arquivos CSV com os dados das notas"""
    import pandas as pd
    from io import BytesIO
    import zipfile
    
    # Criar DataFrames para as notas e itens
    dados_notas = []
    dados_itens = []
    
    for nota in notas:
        # Dados da nota
        dados_notas.append({
            'Tipo': nota['tipo'],
            'Chave': nota['chave'],
            'Número': nota['numero'],
            'Série': nota['serie'],
            'Data Emissão': nota['data_emissao'],
            'Emitente': nota['emitente']['razao_social'],
            'CNPJ Emitente': nota['emitente']['cnpj_cpf'],
            'Destinatário': nota['destinatario']['razao_social'],
            'CNPJ Destinatário': nota['destinatario']['cnpj_cpf'],
            'Valor Total': nota['valor_total'],
            'Forma Pagamento': nota['pagamento']['forma'],
            'Frete': nota['frete']
        })
        
        # Dados dos itens (se solicitado)
        if incluir_itens:
            for item in nota['itens']:
                dados_itens.append({
                    'Tipo Nota': nota['tipo'],
                    'Chave Nota': nota['chave'],
                    'Número Nota': f"{nota['numero']}/{nota['serie']}",
                    'Número Item': item['numero'],
                    'Código': item['codigo'],
                    'Descrição': item['descricao'],
                    'Valor Total': item['valor_total']
                })
    
    # Criar arquivo ZIP com os CSVs
    output = BytesIO()
    with zipfile.ZipFile(output, 'w', zipfile.ZIP_DEFLATED) as zipf:
        # Salvar dados das notas
        df_notas = pd.DataFrame(dados_notas)
        notas_csv = df_notas.to_csv(index=False).encode('utf-8')
        zipf.writestr('notas.csv', notas_csv)
        
        # Salvar dados dos itens (se houver)
        if incluir_itens and dados_itens:
            df_itens = pd.DataFrame(dados_itens)
            itens_csv = df_itens.to_csv(index=False).encode('utf-8')
            zipf.writestr('itens.csv', itens_csv)
    
    output.seek(0)
    return send_file(
        output,
        mimetype='application/zip',
        as_attachment=True,
        download_name='relatorio_notas.zip'
    )

def processar_xml(filepath):
    """Processa o arquivo XML e extrai as informações relevantes"""
    try:
        # Iniciar um dicionário para armazenar os dados extraídos
        xml_data = {
            'chave': '',
            'tipo': '',
            'numero': '',
            'serie': '',
            'data_emissao': '',
            'nat_op': '',
            'valor_total': '0,00',
            'emitente': {
                'razao_social': '',
                'nome_fantasia': '',
                'cnpj_cpf': '',
                'ie': '',
                'endereco': '',
                'municipio': '',
                'uf': '',
            },
            'destinatario': {
                'razao_social': '',
                'cnpj_cpf': '',
                'ie': '',
                'endereco': '',
                'municipio': '',
                'uf': '',
                'email': '',
            },
            'itens': [],
            'pagamento': {
                'forma': 'Não informado',
                'valor': '0,00',
            },
            'frete': 'Não informado',
            'tributos': {
                'bc_icms': '0,00',
                'valor_icms': '0,00',
                'bc_icms_st': '0,00',
                'valor_icms_st': '0,00',
                'valor_produtos': '0,00',
                'valor_frete': '0,00',
                'valor_desconto': '0,00',
                'valor_nota': '0,00',
            },
            'protocolo': 'Não informado',
            'data_autorizacao': 'Não informado',
            'ambiente': 'Não informado',
        }
        
        try:
            # Fazer o parsing do arquivo XML
            tree = ET.parse(filepath)
            root = tree.getroot()
            
            # Determinar namespace se existir
            ns = {}
            if '}' in root.tag:
                ns_uri = root.tag.split('}')[0].strip('{')
                ns = {'nfe': ns_uri}
            
            # Determinar o tipo do documento
            if 'NFe' in root.tag:
                xml_data['tipo'] = 'NFe'
            elif 'NFCe' in root.tag:
                xml_data['tipo'] = 'NFCe'
            elif 'CTe' in root.tag:
                xml_data['tipo'] = 'CTe'
            else:
                xml_data['tipo'] = 'Outro'
            
            # Tentar extrair as informações principais com ou sem namespace
            # Identificar os elementos principais do XML (NFe, infNFe, etc.)
            if ns:
                # Com namespace
                nfe = root.find('.//nfe:NFe', ns) if root.find('.//nfe:NFe', ns) is not None else root
                inf_nfe = nfe.find('.//nfe:infNFe', ns) if nfe is not None else None
                ide = inf_nfe.find('.//nfe:ide', ns) if inf_nfe is not None else None
                emit = inf_nfe.find('.//nfe:emit', ns) if inf_nfe is not None else None
                dest = inf_nfe.find('.//nfe:dest', ns) if inf_nfe is not None else None
                det_list = inf_nfe.findall('.//nfe:det', ns) if inf_nfe is not None else []
                total = inf_nfe.find('.//nfe:total/nfe:ICMSTot', ns) if inf_nfe is not None else None
                pag = inf_nfe.find('.//nfe:pag', ns) if inf_nfe is not None else None
                transp = inf_nfe.find('.//nfe:transp', ns) if inf_nfe is not None else None
                prot_nfe = root.find('.//nfe:protNFe', ns) if root.find('.//nfe:protNFe', ns) is not None else None
            else:
                # Sem namespace
                nfe = root.find('.//NFe') if root.find('.//NFe') is not None else root
                inf_nfe = nfe.find('.//infNFe') if nfe is not None else None
                ide = inf_nfe.find('.//ide') if inf_nfe is not None else None
                emit = inf_nfe.find('.//emit') if inf_nfe is not None else None
                dest = inf_nfe.find('.//dest') if inf_nfe is not None else None
                det_list = inf_nfe.findall('.//det') if inf_nfe is not None else []
                total = inf_nfe.find('.//total/ICMSTot') if inf_nfe is not None else None
                pag = inf_nfe.find('.//pag') if inf_nfe is not None else None
                transp = inf_nfe.find('.//transp') if inf_nfe is not None else None
                prot_nfe = root.find('.//protNFe') if root.find('.//protNFe') is not None else None
            
            # Extrair chave de acesso (ID da NFe)
            if inf_nfe is not None and 'Id' in inf_nfe.attrib:
                xml_data['chave'] = inf_nfe.attrib['Id'].replace('NFe', '')
            
            # Extrair número da nota
            if ide is not None:
                nNF = ide.find('.//nfe:nNF', ns) if ns else ide.find('.//nNF')
                if nNF is not None:
                    xml_data['numero'] = nNF.text
                
                serie = ide.find('.//nfe:serie', ns) if ns else ide.find('.//serie')
                if serie is not None:
                    xml_data['serie'] = serie.text
                
                dhEmi = ide.find('.//nfe:dhEmi', ns) if ns else ide.find('.//dhEmi')
                if dhEmi is not None:
                    data_str = dhEmi.text
                    xml_data['data_emissao'] = format_date(data_str)
                
                natOp = ide.find('.//nfe:natOp', ns) if ns else ide.find('.//natOp')
                if natOp is not None:
                    xml_data['nat_op'] = natOp.text
            
            # Extrair informações do emitente (fornecedor)
            if emit is not None:
                xNome = emit.find('.//nfe:xNome', ns) if ns else emit.find('.//xNome')
                if xNome is not None:
                    xml_data['emitente']['razao_social'] = xNome.text
                
                xFant = emit.find('.//nfe:xFant', ns) if ns else emit.find('.//xFant')
                if xFant is not None:
                    xml_data['emitente']['nome_fantasia'] = xFant.text
                
                CNPJ = emit.find('.//nfe:CNPJ', ns) if ns else emit.find('.//CNPJ')
                if CNPJ is not None:
                    xml_data['emitente']['cnpj_cpf'] = format_cnpj_cpf(CNPJ.text)
            
            # Extrair informações do destinatário
            if dest is not None:
                xNome = dest.find('.//nfe:xNome', ns) if ns else dest.find('.//xNome')
                if xNome is not None:
                    xml_data['destinatario']['razao_social'] = xNome.text
                
                CNPJ = dest.find('.//nfe:CNPJ', ns) if ns else dest.find('.//CNPJ')
                if CNPJ is not None:
                    xml_data['destinatario']['cnpj_cpf'] = format_cnpj_cpf(CNPJ.text)
            
            # Extrair valor total
            if total is not None:
                vNF = total.find('.//nfe:vNF', ns) if ns else total.find('.//vNF')
                if vNF is not None:
                    xml_data['valor_total'] = format_number(vNF.text)
                    xml_data['tributos']['valor_nota'] = xml_data['valor_total']
            
            # Extrair forma de pagamento
            if pag is not None:
                det_pag = pag.find('.//nfe:detPag', ns) if ns else pag.find('.//detPag')
                if det_pag is not None:
                    tPag = det_pag.find('.//nfe:tPag', ns) if ns else det_pag.find('.//tPag')
                    vPag = det_pag.find('.//nfe:vPag', ns) if ns else det_pag.find('.//vPag')
                    
                    if tPag is not None:
                        xml_data['pagamento']['forma'] = get_forma_pagamento(tPag.text)
                    
                    if vPag is not None:
                        xml_data['pagamento']['valor'] = format_number(vPag.text)
            
            # Extrair informações de transporte
            if transp is not None:
                mod_frete = transp.find('.//nfe:modFrete', ns) if ns else transp.find('.//modFrete')
                if mod_frete is not None:
                    xml_data['frete'] = get_modalidade_frete(mod_frete.text)
            
            # Extrair protocolo de autorização
            if prot_nfe is not None:
                inf_prot = prot_nfe.find('.//nfe:infProt', ns) if ns else prot_nfe.find('.//infProt')
                if inf_prot is not None:
                    n_prot = inf_prot.find('.//nfe:nProt', ns) if ns else inf_prot.find('.//nProt')
                    dh_recbto = inf_prot.find('.//nfe:dhRecbto', ns) if ns else inf_prot.find('.//dhRecbto')
                    
                    if n_prot is not None:
                        xml_data['protocolo'] = n_prot.text
                    
                    if dh_recbto is not None:
                        xml_data['data_autorizacao'] = format_date(dh_recbto.text)
            
            # Extrair itens/produtos
            for item in det_list:
                prod = item.find('.//nfe:prod', ns) if ns else item.find('.//prod')
                if prod is not None:
                    xProd = prod.find('.//nfe:xProd', ns) if ns else prod.find('.//xProd')
                    vProd = prod.find('.//nfe:vProd', ns) if ns else prod.find('.//vProd')
                    cProd = prod.find('.//nfe:cProd', ns) if ns else prod.find('.//cProd')
                    
                    produto = {
                        'numero': item.attrib.get('nItem', ''),
                        'codigo': cProd.text if cProd is not None else '',
                        'descricao': xProd.text if xProd is not None else '',
                        'valor_total': format_number(vProd.text) if vProd is not None else '0,00'
                    }
                    
                    xml_data['itens'].append(produto)
                    
            return xml_data
            
        except Exception as e:
            print(f"Erro ao extrair informações: {str(e)}")
            return None
            
    except Exception as e:
        print(f"Erro ao processar XML: {str(e)}")
        return None

def get_text(element, tag, ns):
    """Obtém o texto de um elemento XML considerando namespace"""
    if element is None:
        return ''
    
    result = element.find(f'.//nfe:{tag}', ns)
    if result is None:
        result = element.find(f'.//{tag}')
    
    return result.text if result is not None else ''

def format_date(date_str):
    """Formata a data no padrão brasileiro"""
    if not date_str:
        return ''
    
    # Remover timezone se existir
    date_str = date_str.split('-0')[0] if '-0' in date_str else date_str.split('T')[0] if 'T' in date_str else date_str
    
    # Converter para o formato DD/MM/YYYY
    if 'T' in date_str:
        date_parts = date_str.split('T')
        date = date_parts[0].split('-')
        time = date_parts[1].split(':')
        return f"{date[2]}/{date[1]}/{date[0]} {time[0]}:{time[1]}"
    elif '-' in date_str:
        date = date_str.split('-')
        return f"{date[2]}/{date[1]}/{date[0]}"
    
    return date_str

def format_number(number_str):
    """Formata um número para o padrão brasileiro"""
    if not number_str:
        return '0,00'
    
    try:
        # Remove caracteres não numéricos exceto ponto e vírgula
        number_str = ''.join(c for c in number_str if c.isdigit() or c in '.,')
        
        # Se não houver separador decimal, adiciona ',00'
        if '.' not in number_str and ',' not in number_str:
            number_str = f"{number_str},00"
        
        # Converte para float, tratando diferentes formatos
        if ',' in number_str and '.' in number_str:
            # Formato 1.234,56
            number = float(number_str.replace('.', '').replace(',', '.'))
        elif ',' in number_str:
            # Formato 1234,56
            number = float(number_str.replace(',', '.'))
        else:
            # Formato 1234.56
            number = float(number_str)
        
        # Formata para o padrão brasileiro (1.234,56)
        return f"{number:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')
    except ValueError:
        return '0,00'

def format_cnpj_cpf(document):
    """Formata CNPJ ou CPF"""
    if not document:
        return ''
    
    # CNPJ
    if len(document) == 14:
        return f"{document[:2]}.{document[2:5]}.{document[5:8]}/{document[8:12]}-{document[12:]}"
    # CPF
    elif len(document) == 11:
        return f"{document[:3]}.{document[3:6]}.{document[6:9]}-{document[9:]}"
    
    return document

def format_endereco(element, ns):
    """Formata o endereço a partir dos elementos XML"""
    if element is None:
        return ''
    
    # Determinar se é endereço do emitente ou destinatário
    ender_tag = 'enderEmit' if element.find('.//nfe:enderEmit', ns) is not None or element.find('./enderEmit') is not None else 'enderDest'
    
    logradouro = get_text(element, f'.//{ender_tag}/xLgr', ns) or get_text(element, f'.//{ender_tag}/xLgr') or ''
    numero = get_text(element, f'.//{ender_tag}/nro', ns) or get_text(element, f'.//{ender_tag}/nro') or ''
    complemento = get_text(element, f'.//{ender_tag}/xCpl', ns) or get_text(element, f'.//{ender_tag}/xCpl') or ''
    bairro = get_text(element, f'.//{ender_tag}/xBairro', ns) or get_text(element, f'.//{ender_tag}/xBairro') or ''
    municipio = get_text(element, f'.//{ender_tag}/xMun', ns) or get_text(element, f'.//{ender_tag}/xMun') or ''
    uf = get_text(element, f'.//{ender_tag}/UF', ns) or get_text(element, f'.//{ender_tag}/UF') or ''
    cep = get_text(element, f'.//{ender_tag}/CEP', ns) or get_text(element, f'.//{ender_tag}/CEP') or ''
    
    if cep and len(cep) == 8:
        cep = f"{cep[:5]}-{cep[5:]}"
    
    endereco = f"{logradouro}, {numero}"
    if complemento:
        endereco += f" - {complemento}"
    endereco += f", {bairro}, {municipio}/{uf}, CEP: {cep}"
    
    return endereco

def get_forma_pagamento(codigo):
    """Retorna a descrição da forma de pagamento conforme o código"""
    formas = {
        '01': 'Dinheiro',
        '02': 'Cheque',
        '03': 'Cartão de Crédito',
        '04': 'Cartão de Débito',
        '05': 'Crédito Loja',
        '10': 'Vale Alimentação',
        '11': 'Vale Refeição',
        '12': 'Vale Presente',
        '13': 'Vale Combustível',
        '15': 'Boleto Bancário',
        '16': 'Depósito Bancário',
        '17': 'PIX',
        '18': 'Transferência bancária',
        '19': 'Programa de fidelidade',
        '90': 'Sem pagamento',
        '99': 'Outros'
    }
    
    return formas.get(codigo, f'Forma de pagamento ({codigo})')

def get_modalidade_frete(codigo):
    """Retorna a descrição da modalidade de frete conforme o código"""
    modalidades = {
        '0': 'Contratação do Frete por conta do Remetente (CIF)',
        '1': 'Contratação do Frete por conta do Destinatário (FOB)',
        '2': 'Contratação do Frete por conta de Terceiros',
        '3': 'Transporte Próprio por conta do Remetente',
        '4': 'Transporte Próprio por conta do Destinatário',
        '9': 'Sem Transporte'
    }
    
    return modalidades.get(codigo, f'Modalidade de Frete ({codigo})')

def gerar_danfe_api(xml_content, api_key):
    """
    Gera o DANFE usando a API do MeuDanfe
    """
    try:
        # Endpoint da API
        url = "https://ws.meudanfe.com/api/v1/get/nfe/xmltodanfepdf/API"
        
        # Codificar o conteúdo XML em base64
        xml_base64 = base64.b64encode(xml_content.encode()).decode()
        
        # Preparar os headers
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {api_key}'
        }
        
        # Preparar o payload
        payload = {
            'xml': xml_base64
        }
        
        # Fazer a requisição POST
        response = requests.post(url, json=payload, headers=headers)
        
        # Verificar se a requisição foi bem sucedida
        if response.status_code == 200:
            # Decodificar o PDF da resposta
            pdf_content = base64.b64decode(response.json()['pdf'])
            return pdf_content
        else:
            print(f"Erro na API: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        print(f"Erro ao gerar DANFE: {str(e)}")
        return None

@app.route('/converter-xml-nfe-para-danfe', methods=['GET', 'POST'])
def converter_xml_para_danfe():
    if request.method == 'POST':
        if 'xml_files' not in request.files:
            flash('Nenhum arquivo selecionado')
            return redirect(request.url)
        
        xml_files = request.files.getlist('xml_files')
        
        if not xml_files or xml_files[0].filename == '':
            flash('Nenhum arquivo selecionado')
            return redirect(request.url)
        
        # Criar diretório para os PDFs se não existir
        pdf_dir = os.path.join(app.config['UPLOAD_FOLDER'], 'pdfs')
        os.makedirs(pdf_dir, exist_ok=True)
        
        # Lista para armazenar informações dos arquivos processados
        processed_files = []
        
        # API key do MeuDanfe - Substitua pela sua chave
        api_key = "SUA_API_KEY"
        
        for xml_file in xml_files:
            try:
                # Ler o conteúdo do arquivo XML
                xml_content = xml_file.read().decode('utf-8')
                
                # Gerar o PDF usando a API
                pdf_content = gerar_danfe_api(xml_content, api_key)
                
                if pdf_content:
                    # Extrair a chave da NFe do XML para usar no nome do arquivo
                    tree = ET.fromstring(xml_content)
                    ns = {'ns': 'http://www.portalfiscal.inf.br/nfe'}
                    chave = tree.find('.//ns:chNFe', ns).text
                    
                    # Salvar o PDF
                    pdf_filename = f"DANFE_{chave}.pdf"
                    pdf_path = os.path.join(pdf_dir, pdf_filename)
                    
                    with open(pdf_path, 'wb') as f:
                        f.write(pdf_content)
                    
                    # Adicionar informações do arquivo processado
                    processed_files.append({
                        'nome': xml_file.filename,
                        'chave': chave,
                        'status': 'success',
                        'pdf_path': pdf_filename
                    })
                else:
                    processed_files.append({
                        'nome': xml_file.filename,
                        'status': 'error',
                        'mensagem': 'Erro ao gerar PDF'
                    })
            
            except Exception as e:
                processed_files.append({
                    'nome': xml_file.filename,
                    'status': 'error',
                    'mensagem': str(e)
                })
        
        # Armazenar os arquivos processados na sessão
        session['processed_files'] = processed_files
        
        return render_template('xml_para_pdf.html', processed_files=processed_files)
    
    return render_template('xml_para_pdf.html')

@app.route('/download-pdf/<filename>')
def download_pdf(filename):
    pdf_dir = os.path.join(app.config['UPLOAD_FOLDER'], 'pdfs')
    return send_from_directory(pdf_dir, filename, as_attachment=True)

@app.route('/download-all-pdfs')
def download_all_pdfs():
    if 'processed_files' not in session:
        flash('Nenhum arquivo processado encontrado')
        return redirect(url_for('converter_xml_para_danfe'))
    
    # Criar um arquivo ZIP com todos os PDFs
    memory_file = BytesIO()
    with zipfile.ZipFile(memory_file, 'w') as zf:
        pdf_dir = os.path.join(app.config['UPLOAD_FOLDER'], 'pdfs')
        for file_info in session['processed_files']:
            if file_info['status'] == 'success':
                pdf_path = os.path.join(pdf_dir, file_info['pdf_path'])
                if os.path.exists(pdf_path):
                    zf.write(pdf_path, file_info['pdf_path'])
    
    memory_file.seek(0)
    return send_file(
        memory_file,
        mimetype='application/zip',
        as_attachment=True,
        download_name='danfes.zip'
    )

if __name__ == '__main__':
    if not os.path.exists(app.config['UPLOAD_FOLDER']):
        os.makedirs(app.config['UPLOAD_FOLDER'])
    app.run(debug=True) 